<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Clean;UpdateAssemblyVersions;Build;Package;PublishNuGet" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <NuGetPath Condition="'$(NuGetPath)' == ''">$(MSBuildThisFileDirectory)nuget.exe</NuGetPath>
    <OutputDirectory Condition="'$(OutputDirectory)' == ''">$(MSBuildThisFileDirectory)..\dist</OutputDirectory>
    <NuGetApiKey Condition="'$(NuGetApiKey)' == ''">$(BAMBOO_NUGET_API_PASSWORD)</NuGetApiKey>
  </PropertyGroup>
  <!-- BAMBOO -->
  <PropertyGroup>
    <BuildNumber Condition="'$(BuildNumber)' == ''">$(BAMBOO_BUILDNUMBER)</BuildNumber>
    <BranchName Condition="'$(BranchName)' == ''">$(BAMBOO_REPOSITORY_BRANCH_NAME)</BranchName>
  </PropertyGroup>
  <Import Project="$(MSBuildThisFileDirectory)..\semver.props" Condition="Exists('$(MSBuildThisFileDirectory)..\semver.props')" />
  <!-- GENERAL -->
  <PropertyGroup>
    <MajorVersion Condition="'$(MajorVersion)' == ''">1</MajorVersion>
    <MinorVersion Condition="'$(MinorVersion)' == ''">0</MinorVersion>
  </PropertyGroup>
  <ItemGroup>
    <Solution Include="$(MSBuildThisFileDirectory)..\**\*.sln">
      <Properties>Configuration=Release</Properties>
    </Solution>
  </ItemGroup>
  <ItemGroup>
    <NuSpec Include="$(MSBuildThisFileDirectory)..\**\*.nuspec" />
  </ItemGroup>
  <ItemGroup>
    <AssemblyInfo Include="$(MSBuildThisFileDirectory)..\**\AssemblyInfo.cs" />
  </ItemGroup>
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Projects="@(Solution)" Targets="Build">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="AssembliesBuiltByChildProjects" />
    </MSBuild>
    <Message Text="Assemblies: @(AssembliesBuiltByChildProjects)" />
  </Target>
  <Target Name="Clean">
    <MSBuild Projects="@(Solution)" Targets="Clean" Properties="Configuration=Release">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="AssembliesBuiltByChildProjects" />
    </MSBuild>
    <RemoveDir Directories="$(OutputDirectory)" />
  </Target>
  <Target Name="Rebuild">
    <MSBuild Projects="@(Solution)" Targets="Rebuild" Properties="Configuration=Release">
      <Output
          TaskParameter="TargetOutputs"
          ItemName="AssembliesBuiltByChildProjects" />
    </MSBuild>
  </Target>
  <Target Name="InstallNuGet">
    <MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=$(Configuration);NuGetPath=$(NuGetPath)" />
  </Target>
  <Target Name="_DownloadNuGet">
    <DownloadNuGet OutputFilename="$(NuGetPath)" Condition=" !Exists('$(NuGetPath)') " />
  </Target>
  <Target Name="Version">
    <Message Text="Inputs:" Importance="High" />
    <Message Text="   Major Version...................: $(MajorVersion)" Importance="High" />
    <Message Text="   Minor Version...................: $(MinorVersion)" Importance="High" />
    <Message Text="   Build Number....................: $(BuildNumber)" Importance="High" />
    <Message Text="   Branch Name.....................: $(BranchName)" Importance="High" />
    
    <Version MajorVersion="$(MajorVersion)" MinorVersion="$(MinorVersion)" BuildNumber="$(BuildNumber)" BranchName="$(BranchName)">
      <Output PropertyName="AssemblyVersion" TaskParameter="AssemblyVersion" />
      <Output PropertyName="AssemblyFileVersion" TaskParameter="AssemblyFileVersion" />
      <Output PropertyName="AssemblyInformationalVersion" TaskParameter="AssemblyInformationalVersion" />
    </Version>

    <Message Text="Outputs:" Importance="High" />
    <Message Text="   AssemblyVersion.................: $(AssemblyVersion)" Importance="High" />
    <Message Text="   AssemblyFileVersion.............: $(AssemblyFileVersion)" Importance="High" />
    <Message Text="   AssemblyInformationalVersion....: $(AssemblyInformationalVersion)" Importance="High" />
    <Message Text=" " Importance="High" />
  </Target>
  <UsingTask TaskName="Version" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <MajorVersion ParameterType="System.Byte" Required="true" />
      <MinorVersion ParameterType="System.Byte" Required="true" />
      <BuildNumber ParameterType="System.Int32" Required="true" />
      <BranchName ParameterType="System.String" Required="true" />
      <AssemblyVersion ParameterType="System.String" Output="true" />
      <AssemblyFileVersion ParameterType="System.String" Output="true" />
      <AssemblyInformationalVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try {
            int buildNumber = BuildNumber;
            int patchNumber = 0;
            int majorVersion = MajorVersion;
            int minorVersion = MinorVersion;
            string branchName = BranchName;
            
            int index = branchName.LastIndexOf('/');
            if(index > 0)
            {
              if(branchName.StartsWith("release/"))
              {
                var v = branchName.Substring(index+1);
                var version = System.Version.Parse(v);
                majorVersion = version.Major;
                minorVersion = version.Minor;
                if(version.Build > 0)
                { 
                  patchNumber = buildNumber;
                  buildNumber = version.Build; 
                }
                else 
                {
                  patchNumber = 0 ;
                }
                branchName = "master";
              }
              else {
                branchName = branchName.Substring(index+1);
              }
            }
            branchName = branchName.Replace("-", "");
            
            AssemblyVersion = string.Format("{0}.{1}.0.0", majorVersion, minorVersion);
            AssemblyFileVersion = string.Format("{0}.{1}.{2}.{3}", majorVersion, minorVersion, buildNumber, patchNumber);
            if(branchName != "master")
            {
              if(patchNumber == 0)
                AssemblyInformationalVersion = string.Format("{0}.{1}.{2}-{3}", majorVersion, minorVersion, buildNumber, branchName);
              else
                AssemblyInformationalVersion = string.Format("{0}.{1}.{2}.{3}-{4}", majorVersion, minorVersion, buildNumber, patchNumber, branchName);
            }
            else 
            {
              if(patchNumber == 0)
                AssemblyInformationalVersion = string.Format("{0}.{1}.{2}", majorVersion, minorVersion, buildNumber);
              else
                AssemblyInformationalVersion = string.Format("{0}.{1}.{2}.{3}", majorVersion, minorVersion, buildNumber, patchNumber);
            }
            return true;
        }
        catch (Exception ex) {
            Log.LogErrorFromException(ex);
            return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try {
            OutputFilename = Path.GetFullPath(OutputFilename);
            WebClient webClient = new WebClient();
            webClient.DownloadFile("https://dist.nuget.org/win-x86-commandline/latest/nuget.exe", OutputFilename);
            return true;
        }
        catch (Exception ex) {
            Log.LogErrorFromException(ex);
            return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="ReplaceExtension" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Extension ParameterType="System.String" Required="true" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            if (Files.Length > 0)
            {
                Result = new TaskItem[Files.Length];
                for (var i = 0; i < Files.Length; i++)
                {
                    ITaskItem item = Files[i];
                    string path = item.GetMetadata("FullPath");
                    path = Path.ChangeExtension(path, Extension);
                    Result[i] = new TaskItem(path);
                }
            }
            return true;
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
            return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="UpdateAssemblyVersionsX" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <AssemblyVersion ParameterType="System.String" Required="true" />
      <AssemblyFileVersion ParameterType="System.String" Required="true" />
      <AssemblyInformationalVersion ParameterType="System.String" Required="true" />
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="System.Text.RegularExpressions"/>
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            if (Files.Length > 0)
            {
                for (var i = 0; i < Files.Length; i++)
                {
                    ITaskItem item = Files[i];
                    string path = item.GetMetadata("FullPath");
                    string contents = File.ReadAllText(path);
                    
                    contents = Regex.Replace(contents, "\\[\\s*assembly\\s*:\\s*AssemblyVersion\\s*\\(\\s*\".*\"\\s*\\)\\s*\\]", "[assembly: AssemblyVersion(\""+AssemblyVersion+"\")]");
                    contents = Regex.Replace(contents, "\\[\\s*assembly\\s*:\\s*AssemblyFileVersion\\s*\\(\\s*\".*\"\\s*\\)\\s*\\]", "[assembly: AssemblyFileVersion(\""+AssemblyFileVersion+"\")]");
                    contents = Regex.Replace(contents, "\\[\\s*assembly\\s*:\\s*AssemblyInformationalVersion\\s*\\(\\s*\".*\"\\s*\\)\\s*\\]", "[assembly: AssemblyInformationalVersion(\""+AssemblyInformationalVersion+"\")]");
                    
                    File.WriteAllText(path, contents);
                }
            }
            return true;
        }
        catch (Exception ex)
        {
            Log.LogErrorFromException(ex);
            return false;
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <Target Name="UpdateAssemblyVersions" DependsOnTargets="Version">
    <UpdateAssemblyVersionsX AssemblyVersion="$(AssemblyVersion)" 
                            AssemblyFileVersion="$(AssemblyFileVersion)" 
                            AssemblyInformationalVersion="$(AssemblyInformationalVersion)" 
                            Files="@(AssemblyInfo)" />
  </Target>
  <Target Name="RestorePackages" DependsOnTargets="InstallNuGet">
    <Exec Command="$(NuGetPath) restore &quot;%(Solution.FullPath)&quot; -NonInteractive" LogStandardErrorAsError="true"  Condition="'@(Solution)'!=''" />
  </Target>
  <Target Name="Package" DependsOnTargets="InstallNuGet">
    <ReplaceExtension Extension="csproj" Files="@(NuSpec)">
      <Output ItemName="ProjectPaths" TaskParameter="Result" />
    </ReplaceExtension>
    <MakeDir Directories="$(OutputDirectory)"/>
    <Message Text="BuildNumber: $(BuildNumber)" />
    <Message Text="BranchName: $(BranchName)" />
    <Exec Command="$(NuGetPath) pack &quot;%(ProjectPaths.Identity)&quot; -NonInteractive -OutputDirectory &quot;$(OutputDirectory)&quot; -IncludeReferencedProjects -Properties Configuration=Release" LogStandardErrorAsError="true"  Condition="'@(NuSpec)'!=''" />
  </Target>
  <Target Name="PublishNuGet" DependsOnTargets="InstallNuGet">
    <ItemGroup>
      <NuGetPackage Include="$(MSBuildThisFileDirectory)..\dist\**\*.nupkg" />
    </ItemGroup>
    <Error  Text=" The NuGetApiKey property must be set on the command line."  
            Condition="'$(NuGetApiKey)' == ''" />  
    <Exec Command="$(NuGetPath) push &quot;%(NuGetPackage.Identity)&quot; $(NuGetApiKey) -Source https://www.nuget.org/api/v2/package -NonInteractive" LogStandardErrorAsError="true"  Condition="'@(NuGetPackage)'!=''" />
  </Target>
</Project>
